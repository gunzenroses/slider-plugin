import { EventDispatcher } from "./eventDispatcher";
import { TSettings } from "utils/types";
import ISubview from "subview/subviewElement";
interface IView {
    settings: TSettings;
    sliderContainer: HTMLElement;
    sliderThumb: ISubview;
    sliderThumbSecond: ISubview;
    sliderTrack: HTMLElement;
    sliderRange: ISubview;
    scale: HTMLElement;
    tooltipFirst: ISubview;
    tooltipSecond: ISubview;
    dragObj: HTMLElement | null;
    fromViewSelectThumb: EventDispatcher;
    fromViewDragThumb: EventDispatcher;
    init(settings: TSettings): void;
    change(object: HTMLElement, newThumbCurrent: number): void;
    selectThumb(e: PointerEvent): void;
    dragThumbStart(e: PointerEvent): void;
    dragThumbEnd(): void;
}
declare class SliderView implements IView {
    private parentContainer;
    fromViewSelectThumb: EventDispatcher;
    fromViewDragThumb: EventDispatcher;
    settings: TSettings;
    sliderContainer: HTMLElement;
    sliderThumb: ISubview;
    sliderThumbSecond: ISubview;
    sliderRange: ISubview;
    sliderTrack: HTMLElement;
    tooltipRow: ISubview;
    tooltipFirst: ISubview;
    tooltipSecond: ISubview;
    scale: HTMLElement;
    dragObj: HTMLElement | null;
    private selectThumbHandler;
    private dragThumbHandler;
    private moveThumbHandler;
    private dropThumbHandler;
    constructor(container: HTMLElement);
    init(settings: TSettings): void;
    private createSettings;
    private setupHandlers;
    private enable;
    private addListenerPointerDown;
    private stopListenDown;
    private listenMoveAndUp;
    private removeListenerPointerMoveAndUp;
    selectThumb(e: PointerEvent): void;
    dragThumbStart(e: PointerEvent): void;
    private dragThumbMove;
    dragThumbEnd(): void;
    change(object: HTMLElement, newThumbCurrent: number): void;
    private updateElements;
    private renderSingle;
    private renderDouble;
    private render;
}
export { IView, SliderView };
