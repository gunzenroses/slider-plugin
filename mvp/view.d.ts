import { EventDispatcher } from "../helpers/eventDispatcher";
import { TSettings, TDragObject } from "../types/types";
interface IView {
    settings: TSettings;
    sliderContainer: HTMLElement;
    sliderThumb: HTMLElement;
    sliderThumbSecond: HTMLElement;
    fromViewSelectThumb: EventDispatcher;
    fromViewDragThumb: EventDispatcher;
    selectObject: TDragObject;
    dragObject: TDragObject;
    init(settings: TSettings): void;
    сhange(object: TDragObject, newThumbCurrent: number): void;
    dragThumbEnd(): void;
}
declare class SliderView implements IView {
    parentContainer: HTMLElement;
    fromViewSelectThumb: EventDispatcher;
    fromViewDragThumb: EventDispatcher;
    settings: TSettings;
    sliderContainer: HTMLElement;
    sliderThumb: HTMLElement;
    sliderThumbSecond: HTMLElement;
    sliderRange: HTMLElement;
    sliderTrack: HTMLElement;
    tooltipRow: HTMLElement;
    tooltipFirst: HTMLElement;
    tooltipSecond: HTMLElement;
    scale: HTMLElement;
    selectObject: TDragObject;
    dragObject: TDragObject;
    private selectThumbHandler;
    private dragThumbStartHandler;
    private dragThumbMoveHandler;
    private dragThumbEndHandler;
    changeHandler: (object: TDragObject, number: number) => void;
    ifHorizontal: boolean;
    ifRange: boolean;
    currentFirstInPercents: number;
    currentSecondInPercents: number;
    ifTooltip: boolean;
    ifScale: boolean;
    step: number;
    max: number;
    min: number;
    stepPerDiv: number;
    stepValue: number;
    maxValue: number;
    minValue: number;
    constructor(containerId: string);
    init(settings: TSettings): void;
    private createChildren;
    private setupHandlers;
    private enable;
    private selectThumb;
    private dragThumbStart;
    private dragThumbMove;
    dragThumbEnd(): void;
    сhange(object: TDragObject, newThumbCurrent: number): void;
    private render;
}
export { IView, SliderView };
